<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-28T09:37:12+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">tamakoshi2001’s blog</title><subtitle>tamakoshi2001&apos;s blog for GSoC 2023</subtitle><entry><title type="html">Final report for visualization with qutip</title><link href="http://localhost:4000/2023/08/24/Final-Report-for-Visualization-with-QuTiP.html" rel="alternate" type="text/html" title="Final report for visualization with qutip" /><published>2023-08-24T00:00:00+09:00</published><updated>2023-08-24T00:00:00+09:00</updated><id>http://localhost:4000/2023/08/24/Final%20Report%20for%20Visualization%20with%20QuTiP</id><content type="html" xml:base="http://localhost:4000/2023/08/24/Final-Report-for-Visualization-with-QuTiP.html"><![CDATA[<h2 id="1-personal-background">1. Personal Background</h2>
<p>Name: Yuji TAMAKOSHI<br />
Location: Japan<br />
School: 4th year undergraduate student at the University of Tokyo, Department of physical engineering<br />
GitHub: tamakoshi2001, https://github.com/tamakoshi2001<br />
Email: uotstudent2001@g.ecc.u-tokyo.ac.jp or tamakosiy@gmail.com<br />
Phone: +81 (0)70-8367-2723
Acceptance Letter: <a href="https://github.com/tamakoshi2001/tamakoshi2001.github.io/files/12425516/GSoCAcceptanceLetter.pdf">Acceptance Letter</a><br />
Project Proposal: <a href="https://github.com/tamakoshi2001/tamakoshi2001.github.io/files/12425518/GSoC_QuTiP_Project6.pdf">Project Proposal</a><br />
Blog on my project: <a href="https://tamakoshi2001.github.io/">Blog</a></p>
<h2 id="2-goals-of-this-project">2. Goals of this project</h2>
<h3 id="2-1-improving-plot-functions">2-1. Improving plot functions</h3>
<p>The first goal is to improve plot functions. Before this project, the arguments of functions were not well organized. For example, you couldn’t set <code class="language-plaintext highlighter-rouge">figsize</code> in <code class="language-plaintext highlighter-rouge">plot_wigner</code>, but not in <code class="language-plaintext highlighter-rouge">plot_wigner_sphere</code>. This prevented users from using them intuitively. Also, QuTiP has <code class="language-plaintext highlighter-rouge">colorblind_safe</code> as an option to make itself useful for people suffering from color blindness, but most functions do not use it.</p>
<h3 id="2-2-creating-animation-functions">2-2. Creating animation functions</h3>
<p>The second goal is to create animation functions. The time evolution of quantum states is an important part of quantum physics and QuTiP has many functions to calculate it fast and easily. Animation functions help users to quickly visualize it and make QuTiP more useful.</p>
<h2 id="3-my-contribution">3. My contribution</h2>
<p>You can also see my contribution in <a href="https://tamakoshi2001.github.io/">my blog</a></p>
<h3 id="3-1-improving-plot-functions">3-1. Improving plot functions</h3>
<h4 id="3-1-1-selecting-arguments">3-1-1. Selecting arguments</h4>
<p>We discussed which variables should be kept, which should be added, and how they should be arranged to make the plot functions user-friendly. We decided to place the variables in the order of essential variables for the function, function-specific optional variables, and common variables.</p>
<h4 id="3-1-2-coding">3-1-2. Coding</h4>
<p>Here is an example of my coding. In this case, this function works only with <code class="language-plaintext highlighter-rouge">wigner</code> so it is the first argument. <code class="language-plaintext highlighter-rouge">reflection</code> adds reflections to a plot and is unique to this so set as the second argument. Other arguments are common and many users want to add them to customize the plot. They are set as keyword-only arguments. Other functions are coded in the almost same way.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">plot_wigner_sphere</span><span class="p">(</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span><span class="p">,</span> <span class="n">wigner</span><span class="p">,</span> <span class="n">reflections</span><span class="p">)</span>
</code></pre></div></div>
<p>before</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">plot_wigner_sphere</span><span class="p">(</span><span class="n">wigner</span><span class="p">,</span> <span class="n">reflections</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">colorbar</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">fig</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</code></pre></div></div>
<p>after<br />
Also, coding includes deleting and merging functions. For example, I deleted <code class="language-plaintext highlighter-rouge">plot_wigner_fock_distribution</code> and combined <code class="language-plaintext highlighter-rouge">plot_spin_distribution_2d</code> and <code class="language-plaintext highlighter-rouge">plot_spin_distribution_3d</code> into <code class="language-plaintext highlighter-rouge">plot_spin_distribution</code>.
We want to talk about <code class="language-plaintext highlighter-rouge">qutip.settings.colorblind_safe</code>. When you set it as True, most functions change their colors automatically.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">qutip</span>
<span class="n">rho</span> <span class="o">=</span> <span class="n">qutip</span><span class="p">.</span><span class="nf">rand_dm</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="c1"># default
</span><span class="n">qutip</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">colorblind_safe</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">qutip</span><span class="p">.</span><span class="nf">matrix_histogram</span><span class="p">(</span><span class="n">rho</span><span class="p">,</span> <span class="n">limits</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>
</code></pre></div></div>
<p>a matrix histogram of real part of a random operator with colorblind_safe is False<br />
<img width="700" alt="matrix_histogram" src="https://github.com/tamakoshi2001/tamakoshi2001.github.io/assets/72233550/b870d6ec-ac4a-498c-9b93-85df5eaa2811" /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">qutip</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">colorblind_safe</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">qutip</span><span class="p">.</span><span class="nf">matrix_histogram</span><span class="p">(</span><span class="n">rho</span><span class="p">,</span> <span class="n">limits</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>
</code></pre></div></div>
<p>a matrix histogram of real part of a random operator with colorblind_safe is True<br />
<img width="700" alt="matrix_histogram" src="https://github.com/tamakoshi2001/tamakoshi2001.github.io/assets/72233550/88a578ff-bb2f-440e-ab9a-a5bd349c3870" /></p>
<h4 id="3-1-3-adding-tests">3-1-3. Adding tests</h4>
<p>I added tests to cover all functions in <code class="language-plaintext highlighter-rouge">visualization.py</code>. QuTiP did not have tests for them, but the coverage is over 90% now.</p>
<h4 id="3-1-4-updating-docs-and-tutorials">3-1-4. Updating docs and tutorials</h4>
<p>I changed the doc and tutorials to follow my change.</p>
<h3 id="3-2-creating-animation-functions">3-2. Creating animation functions</h3>
<h4 id="3-2-1-research">3-2-1. Research</h4>
<p>I researched how to create animations with <code class="language-plaintext highlighter-rouge">matplotlib</code>. Although <code class="language-plaintext highlighter-rouge">matplotlib</code> offers <code class="language-plaintext highlighter-rouge">Artistanimation</code> and <code class="language-plaintext highlighter-rouge">Funcanimation</code>, in order for users to use them easily and for maintainers to maintain them effectively, it’s essential to understand how they works correctly.</p>
<h4 id="3-2-2-discussion-about-the-way-to-implement">3-2-2. Discussion about the way to implement</h4>
<p>We discussed the implementation. Due to the speed of function execution and the fact that users can use it in the same way as they use plot functions, we decided to implement animation functions using <code class="language-plaintext highlighter-rouge">Artistanimation</code>.</p>
<h4 id="3-2-3-coding">3-2-3. Coding</h4>
<p>Animation functions are defined in <code class="language-plaintext highlighter-rouge">animation.py</code> and they are wrapper functions of plot functions. They work differently when users pass an object or a list of objects. Here is the code of <code class="language-plaintext highlighter-rouge">matrix_histogram</code>. It return a plot when it has an object. When it has a list of objects, it returns an <code class="language-plaintext highlighter-rouge">ArtistAnimation</code> object. This object needs a list of collections of <code class="language-plaintext highlighter-rouge">artist</code> objects and one collection makes one frame. In case of the <code class="language-plaintext highlighter-rouge">bar3d</code> function, it returns <code class="language-plaintext highlighter-rouge">Poly3DCollection</code> which is a subclass of artist. Different plot functions return different objects so I carefully read the document and coded.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="n">artist</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">bar3d</span><span class="p">(</span><span class="n">xpos</span><span class="p">,</span> <span class="n">ypos</span><span class="p">,</span> <span class="n">zpos</span><span class="p">,</span> <span class="n">dx</span><span class="p">,</span> <span class="n">dy</span><span class="p">,</span> <span class="n">bar_M</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">,</span>
                          <span class="n">edgecolors</span><span class="o">=</span><span class="n">options</span><span class="p">[</span><span class="sh">'</span><span class="s">bars_edgecolor</span><span class="sh">'</span><span class="p">],</span>
                          <span class="n">linewidths</span><span class="o">=</span><span class="n">options</span><span class="p">[</span><span class="sh">'</span><span class="s">bars_lw</span><span class="sh">'</span><span class="p">],</span>
                          <span class="n">shade</span><span class="o">=</span><span class="n">options</span><span class="p">[</span><span class="sh">'</span><span class="s">shade</span><span class="sh">'</span><span class="p">])</span>
        <span class="n">artist_list</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="n">artist</span><span class="p">])</span>

    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">Ms</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">ax</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">animation</span><span class="p">.</span><span class="nc">ArtistAnimation</span><span class="p">(</span><span class="n">fig</span><span class="p">,</span> <span class="n">artist_list</span><span class="p">,</span> <span class="n">interval</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
                                           <span class="n">blit</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">repeat_delay</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</code></pre></div></div>
<p>inside of matrix_histogram<br />
This is a simple animation of a time evolution of a state.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">qutip</span> <span class="kn">import</span> <span class="n">ket</span><span class="p">,</span> <span class="n">sigmaz</span><span class="p">,</span> <span class="n">tensor</span><span class="p">,</span> <span class="n">qeye</span><span class="p">,</span> <span class="n">mesolve</span><span class="p">,</span> <span class="n">anim_schmidt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">notebook</span>
<span class="n">H</span> <span class="o">=</span> <span class="nf">tensor</span><span class="p">(</span><span class="nf">sigmaz</span><span class="p">(),</span> <span class="nf">qeye</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="n">psi0</span> <span class="o">=</span> <span class="nf">ket</span><span class="p">(</span><span class="sh">'</span><span class="s">10</span><span class="sh">'</span><span class="p">)</span> <span class="o">+</span> <span class="nf">ket</span><span class="p">(</span><span class="sh">'</span><span class="s">01</span><span class="sh">'</span><span class="p">)</span>
<span class="n">psi0</span> <span class="o">=</span> <span class="n">psi0</span><span class="p">.</span><span class="nf">unit</span><span class="p">()</span>
<span class="n">tlist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">results</span> <span class="o">=</span> <span class="nf">mesolve</span><span class="p">(</span><span class="n">H</span><span class="p">,</span> <span class="n">psi0</span><span class="p">,</span> <span class="n">tlist</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[])</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ani</span> <span class="o">=</span> <span class="nf">anim_schmidt</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
</code></pre></div></div>

<div><video controls="" src="https://github.com/tamakoshi2001/tamakoshi2001.github.io/assets/72233550/165fb08a-15ec-46df-80a1-6497b2e90c72" muted="false"></video></div>

<h4 id="3-2-4-adding-tests">3-2-4. Adding tests</h4>
<p>I added tests to cover all functions in animation.py.</p>
<h4 id="3-2-5-writing-a-tutorial-notebook">3-2-5. Writing a tutorial notebook</h4>
<p>I wrote a tutorial notebook to explain the way to use the functions because they are useful, but difficult to customize.</p>
<h2 id="4-the-current-state">4. The current state</h2>
<p>I completed all the tasks. My work is in the 6th section.</p>
<h2 id="5-what-is-left-to-do">5. What is left to do</h2>
<p>This project completed all tasks. Nothing is left.</p>
<h2 id="6-code-got-merged">6. Code got merged</h2>
<p>Here is the PRs for my project.</p>
<h3 id="6-1-improving-plot-functions">6-1. Improving plot functions</h3>
<p>PRs with most changes made<br />
<a href="https://github.com/qutip/qutip/pull/2170">Organize arguments of functions and apply colorblind_safe option</a><br />
<a href="https://github.com/qutip/qutip/pull/2192">Add pytest for visualization.py</a><br />
Additional changes<br />
<a href="https://github.com/qutip/qutip/pull/2193">Update plot_wigner_sphere and delete matrix_histogram_complex</a><br />
<a href="https://github.com/qutip/qutip/pull/2219">Sort arguments of sphereplot</a><br />
Update for notebooks<br />
<a href="https://github.com/qutip/qutip-tutorials/pull/66">Change notebook to follow qutip PR#2170</a><br />
<a href="https://github.com/qutip/qutip-tutorials/pull/68">Delete matrix_histogram_complex</a></p>
<h3 id="6-2-creating-animation-functions">6-2. Creating animation functions</h3>
<p>Adding new functions<br />
<a href="https://github.com/qutip/qutip/pull/2203">Add animation functions</a><br />
Making a tutorial notebook for animation functions and update for some notebooks<br />
<a href="https://github.com/qutip/qutip-tutorials/pull/67">Add animation demo</a></p>
<h2 id="7-challenges">7. Challenges</h2>
<h3 id="7-1-keeping-thinking-about-what-code-is-good">7-1. Keeping thinking about what code is good</h3>
<p>The first one was questioning whether my code was optimal. The code I wrote would be used by many people, and Someone might add new things in the future. Therefore, it’s crucial to write code that is user-friendly and extensible. While there’s no definitive answer to what code meets them, I did my best through discussions with my mentor.</p>
<h3 id="7-2-understanding-python">7-2. Understanding Python</h3>
<p>The second challenge was that the technology I used for implementing new features was more complicated than it appeared. I developed a function to create animations using <code class="language-plaintext highlighter-rouge">matplotlib</code>, but to effectively generate the videos, I needed to understand object-oriented programming and how <code class="language-plaintext highlighter-rouge">matplotlib</code> functions are implemented based on that. Moreover, I had to make animation functions in harmony with the existing functions in QuTiP. I changed the implementation multiple times to make good functions.</p>
<h2 id="8-things-i-learned">8. Things I learned</h2>
<h3 id="8-1-the-official-documents">8-1. The official documents</h3>
<p>The first was the significance of official documentation. First, I tried to understand <code class="language-plaintext highlighter-rouge">matplotlib</code> by reading tech blogs written by others. However, this approach proved insufficient, and I realized that I needed a deeper understanding to make functions using <code class="language-plaintext highlighter-rouge">matplotlib</code>. The official document helped me a lot. Of course, I added explanations and made a tutorial notebook for my new functions so that users understand them well.</p>
<h3 id="8-2-communication">8-2. Communication</h3>
<p>The second lesson was the importance of communication. I frequently discussed my code and the progress of my project with my mentor, both in meetings and through text chats. Thanks to these interactions, I was able to refine my code and successfully complete my project on schedule.</p>
<h2 id="9-acknowledgment">9. Acknowledgment</h2>
<p>I’d like to thank Google for giving us a wonderful opportunity to start to contribute to OSS and my mentors <a href="https://github.com/Ericgig">Eric Giguere</a> and <a href="https://github.com/nwlambert">Neill Lambert</a> for helping me completing this project.</p>

<p>Through GSoC2023, I learned about software development from planning a project to collaborating to achieve it. I will continue to do what I can to the community by making use of this experience.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[1. Personal Background Name: Yuji TAMAKOSHI Location: Japan School: 4th year undergraduate student at the University of Tokyo, Department of physical engineering GitHub: tamakoshi2001, https://github.com/tamakoshi2001 Email: uotstudent2001@g.ecc.u-tokyo.ac.jp or tamakosiy@gmail.com Phone: +81 (0)70-8367-2723 Acceptance Letter: Acceptance Letter Project Proposal: Project Proposal Blog on my project: Blog 2. Goals of this project 2-1. Improving plot functions The first goal is to improve plot functions. Before this project, the arguments of functions were not well organized. For example, you couldn’t set figsize in plot_wigner, but not in plot_wigner_sphere. This prevented users from using them intuitively. Also, QuTiP has colorblind_safe as an option to make itself useful for people suffering from color blindness, but most functions do not use it. 2-2. Creating animation functions The second goal is to create animation functions. The time evolution of quantum states is an important part of quantum physics and QuTiP has many functions to calculate it fast and easily. Animation functions help users to quickly visualize it and make QuTiP more useful. 3. My contribution You can also see my contribution in my blog 3-1. Improving plot functions 3-1-1. Selecting arguments We discussed which variables should be kept, which should be added, and how they should be arranged to make the plot functions user-friendly. We decided to place the variables in the order of essential variables for the function, function-specific optional variables, and common variables. 3-1-2. Coding Here is an example of my coding. In this case, this function works only with wigner so it is the first argument. reflection adds reflections to a plot and is unique to this so set as the second argument. Other arguments are common and many users want to add them to customize the plot. They are set as keyword-only arguments. Other functions are coded in the almost same way. plot_wigner_sphere(fig, ax, wigner, reflections) before plot_wigner_sphere(wigner, reflections=False, *, cmap=None, colorbar=True, fig=None, ax=None) after Also, coding includes deleting and merging functions. For example, I deleted plot_wigner_fock_distribution and combined plot_spin_distribution_2d and plot_spin_distribution_3d into plot_spin_distribution. We want to talk about qutip.settings.colorblind_safe. When you set it as True, most functions change their colors automatically. import qutip rho = qutip.rand_dm(5) # default qutip.settings.colorblind_safe = False fig, ax = qutip.matrix_histogram(rho, limits=[0, 1]); a matrix histogram of real part of a random operator with colorblind_safe is False qutip.settings.colorblind_safe = True fig, ax = qutip.matrix_histogram(rho, limits=[0, 1]); a matrix histogram of real part of a random operator with colorblind_safe is True 3-1-3. Adding tests I added tests to cover all functions in visualization.py. QuTiP did not have tests for them, but the coverage is over 90% now. 3-1-4. Updating docs and tutorials I changed the doc and tutorials to follow my change. 3-2. Creating animation functions 3-2-1. Research I researched how to create animations with matplotlib. Although matplotlib offers Artistanimation and Funcanimation, in order for users to use them easily and for maintainers to maintain them effectively, it’s essential to understand how they works correctly. 3-2-2. Discussion about the way to implement We discussed the implementation. Due to the speed of function execution and the fact that users can use it in the same way as they use plot functions, we decided to implement animation functions using Artistanimation. 3-2-3. Coding Animation functions are defined in animation.py and they are wrapper functions of plot functions. They work differently when users pass an object or a list of objects. Here is the code of matrix_histogram. It return a plot when it has an object. When it has a list of objects, it returns an ArtistAnimation object. This object needs a list of collections of artist objects and one collection makes one frame. In case of the bar3d function, it returns Poly3DCollection which is a subclass of artist. Different plot functions return different objects so I carefully read the document and coded. ```python artist = ax.bar3d(xpos, ypos, zpos, dx, dy, bar_M, color=colors, edgecolors=options[‘bars_edgecolor’], linewidths=options[‘bars_lw’], shade=options[‘shade’]) artist_list.append([artist])]]></summary></entry><entry><title type="html">Sixth post</title><link href="http://localhost:4000/2023/08/14/sixth-post.html" rel="alternate" type="text/html" title="Sixth post" /><published>2023-08-14T00:00:00+09:00</published><updated>2023-08-14T00:00:00+09:00</updated><id>http://localhost:4000/2023/08/14/sixth%20post</id><content type="html" xml:base="http://localhost:4000/2023/08/14/sixth-post.html"><![CDATA[<h1 id="making-animation-functions-useful">Making animation functions useful</h1>

<h2 id="merging-plot-functions-and-animation-functions">merging plot functions and animation functions</h2>
<p>First, I integrated the plot functions and animation functions. Two weeks ago, I introduced them to you all. Actually, the code for them was almost identical to that of plot_functions. The reason for this was that we couldn’t call and use plot_functions within animation functions for the sake of speed and ease of use. However, repeatedly using the same code makes maintenance difficult. Therefore, in the current implementation, the behavior of functions changes depending on whether they receive a Qobj or a list of Qobjs. For instance, it goes like this:</p>

<p><img width="700" alt="matrix_histogram" src="https://github.com/qutip/qutip-tutorials/assets/72233550/e9cd3d38-8d31-45a3-ac0b-94409ff78bf2" /></p>

<div><video controls="" src="https://github.com/qutip/qutip-tutorials/assets/72233550/39d7b115-ad02-4dfc-a300-0cf74ca67912" muted="false"></video></div>

<p>However, there’s a feedback that this makes users to hard to find the animation feature. I plan to recreate the animation functions, and by calling the plot functions internally, even though plot functions will create an animation, the user can use plot functions when they want to make a plot and the other one for animations. This has the advantage of being more intuitive for the user.</p>

<h2 id="writing-a-tutorial-notebook">writing a tutorial notebook</h2>
<p>Currently, I am creating a tutorial notebook. There are two reasons for this:
Firstly, Jupyter notebook is not compatible with videos. You can easily view animations created by matplotlib using the %matplotlib notebook command. However, some users can’t use this command. From my tests, people using Linux or Google colab cannot view videos in this way. We intend to introduce a method in the tutorial notebook that allows such users to easily view videos.
Secondly, handling the axes object is challenging. If you wanted to add a title after creating a video, you would need to proceed with a code like the following:</p>

<div><video controls="" src="https://github.com/qutip/qutip-tutorials/assets/72233550/9df92d07-7b52-49ed-9dfc-f77effe36805" muted="false"></video></div>

<p>For those unfamiliar with matplotlib, this is too complicated.
By creating a tutorial notebook, I want to help users maximize the potential of QuTiP.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Making animation functions useful]]></summary></entry><entry><title type="html">Fifth post</title><link href="http://localhost:4000/2023/07/31/fifth-post.html" rel="alternate" type="text/html" title="Fifth post" /><published>2023-07-31T00:00:00+09:00</published><updated>2023-07-31T00:00:00+09:00</updated><id>http://localhost:4000/2023/07/31/fifth%20post</id><content type="html" xml:base="http://localhost:4000/2023/07/31/fifth-post.html"><![CDATA[<h1 id="adding-animation-functions">Adding animation functions</h1>
<p>In quantum mechanics, time evolution is an important topic. QuTiP provides many functions to easily calculate it. However, until now, QuTiP did not have any functions to visualize this.
To make it more useful for users, I have been creating many animation functions. I will first explain the implementation, then present a simple simulation.</p>

<p>Matplotlib offers two tools for animations: ArtistAnimation and FuncAnimation. While FuncAnimation can create animations faster, its implementation is a bit complicated, so I have used ArtistAnimation this time. However, quantum mechanics simulations often involve large matrices, and these can consume a lot of PC memory. This can cause ArtistAnimation to run quite slowly, so I am considering refactoring.</p>

<p>I will now explain the current implementation. ArtistAnimation creates all the animation frames that you want to draw first. Here, ArtistAnimation receives a list of artist objects as an array and draws each list for each frame. Let’s look at an example. The code below is a part of the anim_sphereplot code. As we can see from the official document, plot_surface returns Poly3DCollection, which overrides the Artist class. This code stores this object in an array and adds it to the artist_list to draw it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def anim_sphereplot ...
.
.
# plot with facecolors set to cm.jet colormap normalized to nrm
artist_list = list()
for r, ph in r_and_ph:
    artist = [ax.plot_surface(r * xx, r * yy, r * zz, rstride=1, cstride=1,
                                facecolors=cmap(norm(ph)), linewidth=0,)]
    artist_list.append(artist)
.
</code></pre></div></div>

<p>By doing so, the axes retain settings such as title and xlim, while only the plot is changed.</p>

<p>Next, I will explain about save_options. The Jupyter notebook is a great environment for running Python code. However, it often doesn’t work well when you draw animations. Therefore, we convert the mp4 file of the animation to an html video. By doing so, you can check the animation on the spot, as shown in the image below. save_options allows you to set the file name and set the writer when creating the mp4 file.</p>

<p>Let’s look at an example. Suppose we consider the time evolution of the Pauli operator σ_x, with the Hamiltonian as the Pauli matrix σ_y. By using anim_matrix_histogram, we can check the components of the Pauli operator.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from qutip import ket, sigmaz, tensor, qeye, mesolve
import qutip as qt
import numpy as np
# Hamiltonian
H = qt.sigmay().unit()

# initial state
psi0 = qt.sigmax().unit()

# list of times for which the solver should store the state vector
tlist = np.linspace(0, 2*np.pi, 50)

results = mesolve(H, psi0, tlist, [], [])

fig, ani, html = qt.anim_matrix_histogram(results.states, save_options={'name': 'real'})
html

fig, ani, html = qt.anim_matrix_histogram(results.states, bar_style='img',
                                          color_style='img', save_options={'name': 'imaginary'})
html
</code></pre></div></div>

<div><video controls="" src="https://github.com/qutip/qutip/assets/72233550/b5a842ef-fcf8-4137-a8dc-7c3efcefdb62" muted="false"></video></div>
<p>The real part of the pauli operator</p>

<div><video controls="" src="https://github.com/qutip/qutip/assets/72233550/45550141-8cdb-4131-9109-b17d0a115826" muted="false"></video></div>
<p>The imaginary part of the pauli operator</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Adding animation functions In quantum mechanics, time evolution is an important topic. QuTiP provides many functions to easily calculate it. However, until now, QuTiP did not have any functions to visualize this. To make it more useful for users, I have been creating many animation functions. I will first explain the implementation, then present a simple simulation.]]></summary></entry><entry><title type="html">Fourth post</title><link href="http://localhost:4000/2023/07/17/fourth-post.html" rel="alternate" type="text/html" title="Fourth post" /><published>2023-07-17T00:00:00+09:00</published><updated>2023-07-17T00:00:00+09:00</updated><id>http://localhost:4000/2023/07/17/fourth%20post</id><content type="html" xml:base="http://localhost:4000/2023/07/17/fourth-post.html"><![CDATA[<h1 id="two-weeks-progress-pr-merging-function-enhancement-and-pytest-introduction">Two Weeks Progress: PR Merging, Function Enhancement, and Pytest Introduction</h1>
<p>Hello, today I will introduce what I’ve accomplished over the past two weeks.</p>

<h2 id="pr-merged">PR merged</h2>
<p>The first PR #2170 was merged into my project. You can see what was added to functions from my previous posts. This will be released in the next version of qutip, so it will not be available if you install qutip using <code class="language-plaintext highlighter-rouge">pip install qutip</code>. To actually use it, you need to execute the following code to download and use it from GitHub.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># uninstall qutip if you installed
pip install git+https://github.com/qutip/qutip.git@master
</code></pre></div></div>

<h2 id="combining-matrix_histogram-and-matrix_histogram_complex">Combining matrix_histogram and matrix_histogram_complex</h2>
<p>I worked on combining matrix_histogram and matrix_histogram_complex, two functions visualize different parts of Qobj’s matrix. Moreover, matrix_histogram provided users with more options. Therefore, I’ve been working hard to consolidate these two functions into one and add new features to enable users to visualize more aspects of the matrix properties.</p>

<p><img width="894" alt="matrix_histogram" src="https://github.com/qutip/qutip/assets/72233550/a4c94bba-06f8-474f-b6cf-88e0385d7d5a" /></p>

<h2 id="adding-pytest">Adding pytest</h2>
<p>I also added pytest. Until now, visualization did not have tests. This made it difficult for maintainers to notice if there were bugs in the functions within visualization.py or if changes in the modules which they uses break them. By introducing pytest, we can quickly notice and fix these issues.</p>

<h2 id="next-work">Next work</h2>
<p>We often want to see the time evolution of a system. ‘'’Quite.solver.Result’’’ class allows us to have the state of such systems. For example, ‘'’plot_expectation_values’’’ is suitable for plotting the expectation values of such systems. However, if the user wants to visualize the time evolution of the density matrix of such a system, they have to create their own animation, although the animation function provided by matplotlib is often difficult to use. I am working on providing a function that allows the user to easily create animations by simply passing the results, while at the same time allowing them to edit the animation settings.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Two Weeks Progress: PR Merging, Function Enhancement, and Pytest Introduction Hello, today I will introduce what I’ve accomplished over the past two weeks.]]></summary></entry><entry><title type="html">Third post</title><link href="http://localhost:4000/2023/07/02/third-post.html" rel="alternate" type="text/html" title="Third post" /><published>2023-07-02T00:00:00+09:00</published><updated>2023-07-02T00:00:00+09:00</updated><id>http://localhost:4000/2023/07/02/third%20post</id><content type="html" xml:base="http://localhost:4000/2023/07/02/third-post.html"><![CDATA[<h1 id="continue-working-on-visualizationpy">Continue working on visualization.py</h1>
<p>Over the past two weeks, I have continued working on my previous task and improved it further.</p>

<h2 id="apply-colorblind_safe-more">Apply colorblind_safe more</h2>
<p>In my previous work, I applied colorblind_safe to some functions. I have extended this to many more functions. However, in the previous changes, I did not choose colormaps based on what the user wants to visualize. For example, if you are interested in the variation of values, it is better to use a sequential colormap, whereas if the focus is on whether values take certain values, a diverging colormap is more suitable. I have modified each function to use suitable colors. Please take a look at the following examples: hinton and sphereplot.</p>

<p><img src="https://github.com/qutip/qutip/assets/72233550/c92c7f5a-939f-4a61-a6ef-0098094ac836" width="400px" /><br />
hinton, colorblind_safe = False<br />
<img src="https://github.com/qutip/qutip/assets/72233550/e9e6bb0e-487d-4ccf-9c0e-f74f35c5283b" width="400px" /><br />
hinton, colorblind_safe = True<br />
<img src="https://github.com/qutip/qutip/assets/72233550/76cad290-1211-454a-865e-cd6561de61bd" width="400px" /><br />
sphere_plot, colorblind_safe = True<br />
<img src="https://github.com/qutip/qutip/assets/72233550/ab147971-d5f3-4cc4-b875-afede25644b2" width="400px" /><br />
sphare_plot, colorblind_safe = True</p>

<h2 id="prepare-for-the-first-evaluation">Prepare for the first evaluation</h2>
<p>The first evaluation for GSoC is coming. Therefore, in addition to making the code mergeable, I have also updated the documentation. I am excited to see it being merged and used by everyone. If you have any ideas to make it even better, let’s contribute to QuTiP.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Continue working on visualization.py Over the past two weeks, I have continued working on my previous task and improved it further.]]></summary></entry><entry><title type="html">Second post</title><link href="http://localhost:4000/2023/06/19/second-post.html" rel="alternate" type="text/html" title="Second post" /><published>2023-06-19T00:00:00+09:00</published><updated>2023-06-19T00:00:00+09:00</updated><id>http://localhost:4000/2023/06/19/second%20post</id><content type="html" xml:base="http://localhost:4000/2023/06/19/second-post.html"><![CDATA[<h1 id="aplly-colorblind_safe-and-arrange-arguments">Aplly colorblind_safe and arrange arguments</h1>
<p>Hello. Today, I will introduce what I have been working on for the past two weeks.</p>

<h2 id="colorblind-safe">colorblind safe</h2>
<p>Firstly, it is about color settings. Previously, even when ‘qutip.settings.colorblind_safe=True,’ most functions did not have the capability to change colors. So, I have been modifying the functions to support this. You can see actual usage examples <a href="https://drive.google.com/file/d/1LSNLWW2FBhX4PeMXJTxSN6Qgb-G6_TXn/view">here</a>. By simply setting ‘colorblind_safe=True,’ you can see that the colors are automatically changed.</p>

<p><img src="https://github.com/tamakoshi2001/tamakoshi2001.github.io/assets/72233550/f30373b4-4b6e-4e3b-a4a1-e51ea547cdda" width="300px" /><br />
colorblind_safe = False</p>

<p><img src="https://github.com/tamakoshi2001/tamakoshi2001.github.io/assets/72233550/e5c1237a-b4b0-4c3c-a9a6-67e1ed66ed7c" width="300px" /><br />
colorblind_safe = True</p>

<h2 id="change-arguments">change arguments</h2>
<p>Next, I have been changing the variables in the functions. The issue with the previous functions can be seen by comparing the following two functions:</p>

<ol>
  <li>hinton
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def hinton(rho, xlabels=None, ylabels=None, title=None, ax=None, cmap=None,
        label_top=True, color_style="scaled"):
 """Draws a Hinton diagram for visualizing a density matrix or superoperator.
...
</code></pre></div>    </div>
  </li>
  <li>plot_wigner_sphere
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def plot_wigner_sphere(fig, ax, wigner, reflections):
 """Plots a coloured Bloch sphere.
...
</code></pre></div>    </div>
  </li>
</ol>

<p>By comparing these two functions, you can see the following: The first is that the order of arguments is different between the functions. The second is that there are arguments, such as ‘title,’ that are included in one but not the other. I am currently fixing this. Specifically, I am making the following modifications:</p>

<p>The variables are arranged in the order of mandatory variables specific to the function, optional variables specific to the function, and variables that are common to many functions. Additionally, I am removing arguments like ‘title’ that can be set later by the user. Here is the example of my change;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def hinton(rho, color_style="scaled", label_top=True, *,
           xticklabels=None, yticklabels=None, cmap=None, colorbar=True,
           figure=None, axes=None):
    """Draws a Hinton diagram for visualizing a density matrix or superoperator.
...
</code></pre></div></div>

<p>With these changes, I am confident that users will be able to use the functions consistently.</p>

<p>Currently, I am applying these modifications to as many functions as possible. I will inform you about the results in the next post.”</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Aplly colorblind_safe and arrange arguments Hello. Today, I will introduce what I have been working on for the past two weeks.]]></summary></entry><entry><title type="html">First post</title><link href="http://localhost:4000/2023/06/06/first-post.html" rel="alternate" type="text/html" title="First post" /><published>2023-06-06T00:00:00+09:00</published><updated>2023-06-06T00:00:00+09:00</updated><id>http://localhost:4000/2023/06/06/first%20post</id><content type="html" xml:base="http://localhost:4000/2023/06/06/first-post.html"><![CDATA[<h1 id="first-blog-of-my-contributions-to-qutip">First blog of my contributions to QuTiP</h1>
<p>Hi. My name is Yuji Tamakoshi. For the next three months, I will be updating my blog with my contributions to the Google Summer of Code (GSoC) project. I hope my blog will be helpful to someone in the near future!</p>

<h2 id="what-is-qutip">What is QuTiP?</h2>
<p>According to QuTiP website, QuTiP is an open-source software for simulating the dynamics of open quantum systems [1]. If you are interested in QuTiP after reading this blog, please check out the tutorials on the website and try them out on Google Colaboratory. Let’s experience the wonders and fascination of quantum systems together!</p>

<h2 id="overview-of-my-project">Overview of my project</h2>
<p>I will be focusing on improving the visualization capabilities of QuTiP. Visualization, such as graphs and animations, often helps people understand things better, and the same applies to understanding quantum mechanics.
The outline of my project is as follows: 
QuTiP already has several visualization functions, but they can sometimes be unfriendly to users due to unchangeable colors and disorganized arguments. This project aims to enhance these functions by unifying their interfaces and adding colorblind options. Additionally, I will develop an animation function for the evolution of quantum states. The final deliverables will include unified interfaces for plot functions with colorblind support, animation functions for the Result object, as well as pytests and documentation for all of these features.
You can find more details about <a href="https://docs.google.com/document/d/1s66NPwtaFdaMp8p8nJi1qxfbzxhZyDW6Z6_aodu4sjw/edit?usp=sharing">my project</a> here.</p>

<h2 id="what-is-next">What is next?</h2>
<p>Currently, I am working on introducing a new class to make QuTiP more colorblind-friendly, and selecting function arguments to make them more intuitive for beginners. I will write them in my next blog post.</p>

<p>You can follow my current activities through <a href="https://github.com/qutip/qutip/pull/2170">this link</a>, and <a href="https://github.com/qutip/qutip/pull/2113">PR-2113</a> and <a href="https://github.com/qutip/qutip/pull/2120">PR-2120</a> are my contributions to QuTiP. If you are interested in contribution. See <a href="https://qutip.org/docs/latest/development/contributing.html">this</a> and try!</p>

<p>[1] https://qutip.org/</p>]]></content><author><name></name></author><summary type="html"><![CDATA[First blog of my contributions to QuTiP Hi. My name is Yuji Tamakoshi. For the next three months, I will be updating my blog with my contributions to the Google Summer of Code (GSoC) project. I hope my blog will be helpful to someone in the near future!]]></summary></entry></feed>